__________________________Trabalhando com Bando de Dados___________________________________________________________
                                    Desafio 5.1









++++++++++++++++++++++++ Instalando Postgres e Postbird +++++++++++++++++++++++


    .Vamos installar o banco de dados Postgres, Link para windows

        https://github.com/rocketseat-education/bootcamp-launchbase-05/blob/master/docs/guia-instalacao-postgres.md
    
    .Vamos instalar o Postbird, programa de interface para o postgres, link:

        https://electronjs.org/apps/postbird 











++++++++++++++++++++++++ Criando banco e tabela de instrutores +++++++++++++++++++


    .Abra o powershell e escreva a linha para chegar ao banco de dados instalado:

        cd "C:\Program Files\PostgreSQL\12\bin\"

    .E essa linha para iniciar o banco de dados:

        .\pg_ctl.exe -D "C:\Program Files\PostgreSQL\12\data" start

    .Agora abra o postbird e faz a conexão

    .Na parte query, dentro do postbird, escreva a linha:

        CREATE DATABASE gymmanager

    .Clique em "Run Query"
    .De um refresh na lista de DATABASEs

    .Selecione a DATABASE e a parte Structure
        .Crie uma nova tabala no botao "add table"

    . Clique em add column
        .Crie o avatar_URL de Type: "text" e marcar permitir vazio(allow null)
        .Crie o name de Type: "text" e marcar permitir vazio(allow null)
        .Crie o birth de Type: "timestamp without time zone" e marcar permitir vazia(allow null)
        .Crie o gender de Type: "text" e marcar permitir vazia(allow null)
        .Crie o services de Type: "text" e marcar permitir vazia(allow null)
        .Crie o create_at de Type: "timestamp without time zone" e marcar permitir vazia(allow null)

    











  ++++++++++++++++++++++++ Refatorando estrutura de pastas +++++++++++++++++++  


    .Na pasta bootcamp copie a pasta modulo04 e cole remoneando ela para modulo05
            .Delete NODE_MODULES E package-lock.json

    .Abra o modulo05 no VisualStudio

    .Crie uma nova pasta chamada "src" dentro dela colque a pasta "controllers",
    a pasta "views" e todos os arquivos ".js"

    .Deleta o data.json

    .Dentro da pasta "src" crie a pastas "app" e coloque a pasta "controllers",
    e a pasta "views" dentro dela.

    .No arquivo package.json mude a linha:

        "nodemon": "nodemon --ignore server.js",
                para
        "nodemon": "nodemon --ignore src/server.js",

            .E mude a linha:

        "browsersync": "browser-sync start --proxy http://localhost:5000 --files 'public,views, !data.json'"
                para
        "browsersync": "browser-sync start --proxy http://localhost:5000 --files 'public,src/app/views'"

    .Na pasta "src" em routes.js, reescreva aS linhaS:

        const instructors = require('./app/controllers/instructors')
        const members = require('./app/controllers/members')

    .No arquivo server.js mude a linha:

        nunjucks.configure("src/app/views", {

    .Dentro da pasta "src" crie a pasta "lib"

        .Coloque o arquivo utils.js dentro da pasta "lib"













++++++++++++++++++++++++ Exportando com methof shorthand ES6 +++++++++++++++++++  


    .No arquivo instructors.js

        .Delete a linha "const fs" e "const data"

        .Crie um module.exports de objeto para refazer as funçoes das rotas:

            module.exports = {
                index(req, res){

                }   
                create(req, res){
                    
                }   
                post(req, res){
                    
                }   
                show(req, res){
                    
                }                
                edit(req, res){
                    
                }   
                put(req, res){
                    
                }   
                delete(req, res){
                    
                }   
            }    

        .Copie e cole o conteudo dos respectivos exports do arquivo

        .No ES6 index tire o ,{ instructors: data.instructors }

        .Na ES6 "post" deixe apenas o conteudo das KeysObject,
         o let = req.body e add um return vazio

        .No show, edit e delete o conteudo será só return

        .No put pode colocar a validaçao keysObject

        .Mude a Const, antes do exports, para:

            const { age, date } = require('../../lib/utils')


    .No arquivo members.js copie e cole o conteudo do instructors.js

        .Troque tudo que for instructores por members
        .No ES6 index tire o ,{ members: data.members }
        .Delete a linha "let" no ES6 post

    .No arquivo utils.js tire as linhas:

        .exemplo: age: function() --para--> age()









    
    
+++++++++++++++++++++++ Configurando conexão do banco +++++++++++++++++++ 


    .instale  a dependencia para conectar o projeto com o postgres:

        npm install pg

    .De também o comando npm install, para garantir o resto das configuraçoes:

        npm install

    .Dentro da pasta "src" crie uma pasta de nome "config"

        .Dentro da pasta "config" crie um script de nome "db.js"

            .Dentro do arquivo escreva esse codigo:

                const { Pool } = require("pg")

                module.exports = new Pool({
                    user: 'hellom',
                    password: "",
                    host: "localhost",
                    port: 5432,
                    database: "gymmanager"  
                })



    








_____________________________________________________________________________________
                                    Desafio 5.2




+++++++++++++++++++++++ Inserindo dados no banco +++++++++++++++++++



    .No arquivo instructors.js na função POST

        .Delete a linha da variavel let

        .Em cima to "return" escreva as linhas:
            
            const query = `
                INSERT INTO instructors (
                    name,
                    avatar_URL,
                    gender,
                    services,
                    birth,
                    create_at
                ) VALUES ($1, $2, $3, $4, $5, $6)
                RETURNING id
            `

            const values = [
                req.body.name,
                req.body.avatar_URL,
                req.body.gender,
                req.body.services,
                date(req.body.birth).iso,
                date(Date.now()).iso
            ]

    .Coloque o POSTGRES para rodar e abra o POSTBIRD

    .No POSTBIRD abra o database gymmanager e selecione a tabela instructors

        .Na aba "Query" escreva essas linhas:

            INSERT INTO instructors (
                name,
                avatar_URL,
                gender,
                services,
                birth,
                create_at
            ) VALUES ('hellom', 'htt', 'm', 'se', '2000-01-02', '2000-02-01')
            RETURNING id

        .Clique no botão "Run Selection"

    .No arquivo instructors.js na função POST

        .tire o "return"

        .Em baixo do "const {age,date}", escreva

            const db = require('../../config/db')

        .Escreva no fim da função POST:
            
            const { Pool } = require("pg")

            db.query(query, values, function (err, results){
                console.log(err)
                console.log(results)
                return
            })
    
        .Rode o site com "npm start"

            .crie um novo instrutor
            .Abra o POSTBIRD para analisar os dados salvos na tabala instructors/content

        .Estando tudo certo reescreva:

            db.query(query, values, function (err, results){
                if(err) return res.send("Database Error!")

                return res.redirect(`/instructors/${results.rows[0].id}`)
            })








+++++++++++++++++++++++ Buscando dados do banco +++++++++++++++++++



    .No arquivo instructors.js na função INDEX, escreva em cima do return:

        db.query(`SELECT * FROM instructors`, function(err, results){
            if(err) return res.send("Database Error!")

            return res.render("instructors/index", {instructors: results.rows})
        })

    .Apos salvar ve se vai aparecer os instrutores na pagina index









+++++++++++++++++++++++ Criando models e aprofundando em callback function +++++++++++++++++++


    .Dentro da pasta "app" crie a pasta "models"

        .Ela será responsavel pela parte de ligação com o banco de dados

        .Dentro da pasta "models" crie o script "Instructor.js"

        .Dentro do (PRIMEIRA LETRA MAIUSCULA)"Instructor.js", escreva:

            module.exports = {
                all(callback){

                    db.query(`SELECT * FROM instructors`, function(err, results){
                        if(err) return res.send("Database Error!")

                        callback(results.rows)
                    })

                },

                create(){

                }
            }
    .No arquivo instructors.js, em baixo do "const db" escreva:

        const Instructor = require ('../models/Instructor')

    .Ainda no arquivo instructors.js, na função index, delete o conteudo e escreva:
        Instructor.all(function(instructors) {
            return res.render("instructors/index", {instructors})
    
        })

    .No arquivo Instructor.js no objeto "create()", escreva:

        create(data, callback){
            const query = `
                INSERT INTO instructors (
                    name,
                    avatar_URL,
                    gender,
                    services,
                    birth,
                    created_at
                ) VALUES ($1, $2, $3, $4, $5, $6)
                RETURNING id
            `
        const values = [
            data.nome,
            data.avatar_URL,
            data.gender,
            data.services,
            date(data.birth).iso
            date(Date.now()).iso
        ]

        db.query(query, values, function(err, results){
            if(err) return res.send("Database Error!")

            callback(results.rows[0])
        })
        }

    .No arquivo instructors.js na função POST reescreva o conteudo para:

        const keys = Object.keys(req.body)

        for(key of keys) {
            if (req.body[key] == "") {
                return res.send('please, fill all fields')
            }
        }

        Instructor.create(req.body, function(instructor) {
            return res.redirect(`/instructors/${instructor.id}`)
        })

    .Ainda no arquivo instructors.js

        .Passe o "const db" e o "const {age, data}" para o arquivo Instructor.js

    TESTAR - TENTAR CRIAR NOVO INSTRUTOR (vai ser preciso voltar no index pra ver se salvou)









+++++++++++++++++++++++ Buscando Registro unico na banco de dados +++++++++++++++++++



    .No arquivo Instructor.js crie o objeto:

        find(id, callback) {`
            SELECT *
            FROM instructors
            WHERE id = $1`, [id], function(err, results){
                if(err) return res.send("Database Error!")
                callback(results.rows[0])
            }
        }
    
    .No arquivo instructors.js na função SHOW, escreva:

        Instructor.find(req.params.id, function (instructor){
            if (!instructor) return res.send("Instructor no found!")

            instructor.age = age(instrutor.birth)
            instructor.services = instructor.services.split(",")

            instructor.create_at = date(instructor.created_at).format

            return res.render("instructors/show", { instrutor })
        })

        .Reescreva a const do age:

        const { age } = require('../../lib/utils')

    .No arquivo ultis.js, no return do "date(timestamp)",

        .Em baixo de "birthDay: ${day}/${month}", escreva:

            format: `${day}/${month}/${year}`

    









+++++++++++++++++++++++ Editando Dados do bancos +++++++++++++++++++



    .No arquivo instructors.js, na função edit escreva:

        Instructor.find(req.params.id, function (instructor){
            if (!instructor) return res.send("Instructor no found!")

            instructor.birth = date(instrutor.birth).iso

            return res.render("instructors/edit", { instrutor })
        })

    .No arquivo Instructor.js, crie um novo objeto em baixo do obj FIND:

        update(data, callback) {
            const query = `
            UPDATE instructors SET
                avatar_URL=($1),
                name=($2),
                birth=($3),
                gender=($4),
                services=($5),
            WHERE id =($6)
            `
            const values = [
                data.avatar_URL,
                data.name,
                date.(data.birth).iso,
                data.gender,
                data.services,
                data.id
            ]

            db.query(query, values, function(err, results){
                if(err) return res.send("Database Error!")

                callback()
            })
        }

    .No arquivo instructors.js, na função PUT escreva:

        const keys = Object.keys(req.body)

        for(key of keys) {
            if (req.body[key] == "") {
                return res.send("Please, fill all fields!")
            }
        }

        Instructor.update(req.body, function() {
            return res.redirect(`/instructors/${req.body.id}`)
        })









+++++++++++++++++++++++ Capturando erros da aplicação +++++++++++++++++++


    .No arquivo Instructor.js:

        .Mude todas as linhas "
            
            return res.send("Database Error!")

                Para
            
            throw `database Error! ${err}`

    





+++++++++++++++++++++++ Deletando dados do banco +++++++++++++++++++


.No arquivo Instructor.js, crie um novo objeto em baixo do obj UPDATE:

    delete(id, callback) {
        db.query(`DELETE FROM instructors WHERE id = $1`, [id], function(err, results){
            if(err) throw `Database Error! ${err}`

            return callback()
        })
    }

.No arquivo instructors.js, na função DELETE, escreva:

    Instructor.delete(req.body, function(){
        return res.redirect(`/instructors`)
    })









__________________________ AJUSTES DE MEMBROS ___________________________________________________________
                     ..continuação para o Desafio 5.2




    
+++++++++++++++++++++++ Ajustando controllers de members +++++++++++++++++++


    .No arquivo members.js:

        .Em baixo do "const {age, date}", escreva a linha:

            const Member = require('../models/Member')

        .Copie e cole o module.exports do arquivo instructors.js para o members.js

            .faça um (ctrl + f) para mudar instructor por member.
                ->DIFERENCIE MAIUSCULO DE MINUSCULO PARA A PRIMEIRA LETRA
            
        .Na função SHOW, mude a linha "member.age" pela linha

            member.birth = date(member.birth).birthDay

            .Tire as linhas: "member.services e member.created_at








+++++++++++++++++++++++ Criando tabela de membros +++++++++++++++++++

    .Abra o POSTBIRD e crie uma nova tabela com o NOME:

        members
    
    .Adicione as seguintes colunas:

        Name: name - type: text - allow null
        Name: avatar_URL - type: text - allow null
        Name: email - type: text - allow null
        Name: gender - type: text - allow null
        Name: birth - type: timestamp without time zone - allow null
        Name: blood - type: text - allow null
        Name: weight - type: integer - allow null
        Name: height - type: integer - allow null






+++++++++++++++++++++++ Model de membros +++++++++++++++++++


    .Na pasta "models" crie o arquivo "Member.js"

        .Copie e cole o conteudo do arquivo "Instructor.js" para o "Member.js"

        .No arquivo "Member.js" use (ctrl + f) para mudar:

            intructor 

                para
            
            member

        .No objeto CREATE, reescreva essas partes:

            const query = `
                INSERT INTO members (
                    name,
                    avatar_URL,
                    gender,
                    email,
                    birth,
                    blood,
                    weight,
                    height
                )   VALUES ($1, $2, $3, $4 ,$5 ,$6, $7, $8)
            `

            const values = [
                data.name,
                data.avatar_URL,
                data.gender,
                data.email,
                date(data.birth).iso,
                data.blood,
                data.weight,
                data.height
            ]

        .Na objeto UPDATE, reescreva essas partes:

            const query = `
            UPDATE members SET
                avatar_URL=($1),
                name=($2),
                birth=($3),
                gender=($4),
                email=($5),
                blood=($6),
                weight=($7),
                height=($8)
            WHERE id = $9
            `

            const values = [
                data.avatar_URL,
                data.name,
                date(data.birth).iso,
                data.gender,
                data.email,
                data.blood,
                data.weight,
                data.height,
                data.id
            ]

    .TESTAR - CADASTRAR NOVO MEMBRO
        




    
+++++++++++++++++++++++ Ordenando dados do banco +++++++++++++++++++


    .No arquivo Insctructor.js, no objeto ALL:

        .Mude a parte do SELECT para:

            SELECT *
            FROM instructors
            ORDER BY name ASC, function...(função matém igual)











__________________________ Relacionando Tabelas ___________________________________________________________
                     .. part 1/2 Desafio 5.3